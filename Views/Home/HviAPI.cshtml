@using IntegralTradingJS.Models;

@(Html.DevExtreme().DataGrid<HVI>()
    .ID("bodyTable")
    .ShowBorders(true)
    .DataSource(d => d.Mvc().Controller("HVI").LoadAction("Get").Key("ID"))
    .Columns(columns => {
        columns.AddFor(m => m.ID);
        columns.AddFor(m => m.UHML);
        columns.AddFor(m => m.UI);
        columns.AddFor(m => m.Strength);
        columns.AddFor(m => m.SFI);
        columns.AddFor(m => m.MIC);
        columns.AddFor(m => m.ColorGrade);
        columns.AddFor(m => m.TrashId);
        columns.AddFor(m => m.OrderId);
    })
    .Paging(p => p.PageSize(10))
    .FilterRow(f => f.Visible(true))
    .HeaderFilter(f => f.Visible(true))
    .GroupPanel(p => p.Visible(true))
    .Grouping(g => g.AutoExpandAll(false))
    .RemoteOperations(true)
    .Summary(s => s
        .TotalItems(totalItems => {
            totalItems.AddFor(m => m.OrderId).SummaryType(SummaryType.Count);
        })
        .GroupItems(groupItems => {
            groupItems.Add().SummaryType(SummaryType.Count);
        })
    )
)

@section Scripts{
    <script src="~/js/dist/browser/signalr.min.js"></script>
    <script>       

        var connection = new signalR.HubConnectionBuilder()
            .withUrl("/hvihub")
            .build();

        $(function() {
            connection.start().then(function(){
                setInterval(() => {
                    connection.invoke("ExecuteProcedure")
                    .catch(function (err) {
                            return console.error(err.toString());
                    });
                }, 5000);

                connection.on("ReceiveStoredProcedureResult", function (result) {
                    var _store = [{ Id: null, Uhml : null , Ui: null, Strength: null, Sfi: null, Mic: null, ColorGrade: null, TrashId: null }];

                    result.forEach(x => {
                        _store.push({
                            Id: x.id,
                            Uhml: x.uhml,
                            Ui: x.ui,
                            Strength: x.strength,
                            Sfi: x.sfi,
                            Mic: x.mic,
                            ColorGrade: x.colorGrade,
                            TrashId: x.trashId
                        });
                    });

                    $("#bodyTable").dxDataGrid({
                        dataSource: _store.shift(), visible: true
                    });
                });
             });
        });      

    </script>
}


