@{
    Layout = "~/Views/Shared/_HomeLayout.cshtml";
}

<div id="employeeInfo">
    <p id="ID"></p>
    <p id="Price"></p>
</div>

@using IntegralTradingJS.Models;
<div id="mainDiv">

    @(Html.DevExtreme().DataGrid<HVI>()
              .ID("bodyTable")
              .ShowBorders(true)
              .DataSource(d => d.Mvc().Controller("HVI").LoadAction("Get").Key("ID"))
              .Height(500)
              .FilterRow(f => f.Visible(true))
              .HeaderFilter(f => f.Visible(true))
              .ShowColumnLines(true)
              .ShowRowLines(true)
              .RowAlternationEnabled(true)
              .ShowBorders(true)
              .GroupPanel(p => p.Visible(true))
              .Sorting(sorting => sorting.Mode(GridSortingMode.None))
              .Grouping(g => g.AutoExpandAll(false))
              .RemoteOperations(true)
              .LoadPanel(loadPanel => loadPanel.Enabled(true))
              .Scrolling(scrolling => scrolling.ColumnRenderingMode(GridColumnRenderingMode.Standard))
              .Paging(paging => paging.Enabled(false))
              .AllowColumnResizing(true)
              .ColumnAutoWidth(true)
              .FocusedRowEnabled(true)
              .Editing(e => e.UseIcons(true))

        .Columns(columns =>
        {
            columns.AddFor(m => m.ID).Name("offerId")
                                     .Width(35)
                                     .AllowFiltering(false)
                                     .AllowSorting(false)
                                     .CellTemplate(@<text>
                                         @(Html.DevExtreme()
                                            .Button()
                                            .Hint("Ofertar")
                                            .Icon("money")
                                            .Type(ButtonType.Normal)                        
                                            .UseSubmitBehavior(false)
                                            .OnClick("function(options) {redirectID(value); options.stopPropagation; }")
                                         )
                                     </text>);    
                
            columns.AddFor(m => m.ID);
            columns.AddFor(m => m.User);
            columns.AddFor(m => m.Status);
            columns.AddFor(m => m.Price);
            columns.AddFor(m => m.PriceType);
            columns.AddFor(m => m.Warehouse);
            columns.AddFor(m => m.ValidityDate);
            columns.AddFor(m => m.ValidityType);
            columns.AddFor(m => m.OfferDate);
            columns.AddFor(m => m.CropYear);
            columns.AddFor(m => m.Maturity);
            columns.AddFor(m => m.Comp);
            columns.AddFor(m => m.C1);
            columns.AddFor(m => m.C2);
            columns.AddFor(m => m.Leaf);
            columns.AddFor(m => m.Stpl);
            columns.AddFor(m => m.Mic);
            columns.AddFor(m => m.Str);
            columns.AddFor(m => m.LRR);
            columns.AddFor(m => m.NetWeight);
            columns.AddFor(m => m.Len);
            columns.AddFor(m => m.Ext);
            columns.AddFor(m => m.RD);
            columns.AddFor(m => m.PlusB);
            columns.AddFor(m => m.Uni);
            columns.AddFor(m => m.Trash);
            

        })
    )

</div>

<div id="formDiv" class="visually-hidden container">
    <h1>Buyer Page</h1>

    <div class="mb-3 w-25">
        <label for="offerId" class="form-label">ID de la oferta</label>
        <input readonly type="number" class="form-control" id="offerId">
    </div>

    <div class="mb-3 w-25">
        <label for="sellerPrice" class="form-label">Precio ofrecido por el vendedor</label>
        <input readonly type="number" class="form-control" id="sellerPrice">
    </div>

  <div class="mb-3 w-25">
    <label for="offerPrice" class="form-label">Coloca tu oferta</label>
        <input type="text" class="form-control" id="offerPrice">
  </div>

  <div class="mb-3 w-50">
    <label for="descripcion" class="form-label">Comentarios adicionales</label>
        <textarea type="text" class="form-control" id="descripcion"></textarea>
  </div> 
  
  <button onclick="changeStatus()"  class="btn btn-primary fw-bold">Enviar oferta</button>

</div>

@section Scripts{
    <script src="~/js/dist/browser/signalr.min.js"></script>
    <script>       

        const mainDiv = document.getElementById("mainDiv")
        const formDiv = document.getElementById("formDiv")
        const bodyTable = document.getElementById("bodyTable")
        const offerId = document.getElementById("offerId")
        const sellerPrice = document.getElementById("sellerPrice")
        const offerPrice = document.getElementById("offerPrice")
        const descripcion = document.getElementById("descripcion")
        const nestUl = document.getElementById("nestUl")
        let cells = [{ Id: null, Price: null }]

        function removeClass() {
            if (nestUl.classList.contains("visually-hidden")){
                nestUl.classList.remove("visually-hidden")
            }
            else{
                nestUl.classList.add("visually-hidden")
            }
        }

        function getHtml() {
            console.log(bodyTable.innerHTML)
        }

        var connection = new signalR.HubConnectionBuilder()
            .withUrl("/hvihub")
            .build();

            function changeStatus(){
            fetch("/Buyer/UpdateStatus", {
                method:"PUT",               
                body: FormData
            });

            offerPrice.value = ""
            descripcion.value = ""

            formDiv.classList.add("visually-hidden")
            mainDiv.classList.remove("visually-hidden")
        }

        $(function() {
            connection.start().then(function(){
                setInterval(() => {
                    connection.invoke("ExecuteProcedure")
                    .catch(function (err) {
                            return console.error(err.toString());
                    });
                }, 60000);

                connection.on("ReceiveStoredProcedureResult", function (result) {
                    var _store = [{
                        Id: null, User: null, Status: null, Price: null, PriceType: null, Warehouse: null, ValidityDate: null,
                        ValidityType: null, OfferDate: null, CropYear: null, Maturity: null, Comp: null, C1: null, C2: null, Leaf: null, Stpl: null,
                        Mic: null, Str: null, LRR: null, NetWeight: null, Len: null, Ext: null, RD: null, PlusB: null, Uni: null, Trash: null
                    }];

                    result.forEach(x => {
                        _store.push({
                            Id: x.id,
                            User: x.user,
                            Status: x.status,
                            Price: x.price,
                            PriceType: x.priceType,
                            Warehouse: x.warehouse,
                            ValidityDate: x.validityDate,
                            ValidityType: x.validityType,
                            OfferDate: x.offerDate,
                            CropYear: x.cropYear,
                            Maturity: x.maturity,
                            Comp: x.comp,
                            C1: x.c1,
                            C2: x.c2,
                            Leaf: x.leaf,
                            Stpl: x.stpl,
                            Mic: x.mic,
                            Str: x.str,
                            LRR: x.lrr,                            
                            NetWeight: x.netWeight,                            
                            Len: x.len,
                            Ext: x.ext,
                            RD: x.rd,
                            PlusB: x.plusB,
                            Uni: x.uni,
                            Trash: x.trash                           
                        });
                    });               

                    $("#bodyTable").dxDataGrid({
                        dataSource: _store.shift()                        
                    });                   
                    
                });
             });
        });

        function redirectID(ids) {
            offerId.value = ids
            
            const itemFound = cells.find((x) => {
                return x.Id == ids
            })
            console.log(itemFound)
            sellerPrice.value = itemFound.Price

            mainDiv.classList.add("visually-hidden")
            formDiv.classList.remove("visually-hidden")        
        }

        document.addEventListener('DOMContentLoaded', listaDataGrid())
        function listaDataGrid(){
            $.get("/Home/GetOfferPrice", function (hviList) {
                hviList.forEach(x => {
                    cells.push({
                        Id : x.ID,
                        Price : x.Price
                    })
                    
                });
            });
            
        }
         
    </script>
}


