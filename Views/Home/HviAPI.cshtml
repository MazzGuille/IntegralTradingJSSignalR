@using IntegralTradingJS.Models;

@(Html.DevExtreme().DataGrid<HVI>()
    .ID("bodyTable")
    .ShowBorders(true)
    .DataSource(d => d.Mvc().Controller("HVI").LoadAction("Get").Key("ID"))
    .HighlightChanges(true)
    .Columns(columns => {
        columns.AddFor(m => m.ID);
        columns.AddFor(m => m.WhseCode);
        columns.AddFor(m => m.WhseTag);
        columns.AddFor(m => m.C1);
        columns.AddFor(m => m.C2);
        columns.AddFor(m => m.Leaf);
        columns.AddFor(m => m.Stpl);
        columns.AddFor(m => m.Mic);
        columns.AddFor(m => m.Str);
        columns.AddFor(m => m.LRR);
        columns.AddFor(m => m.CropYear);
        columns.AddFor(m => m.NetWeight);
        columns.AddFor(m => m.Comp);
        columns.AddFor(m => m.Len);
        columns.AddFor(m => m.Ext);
        columns.AddFor(m => m.RD);
        columns.AddFor(m => m.PlusB);
        columns.AddFor(m => m.Uni);
        columns.AddFor(m => m.Trash);
        columns.AddFor(m => m.StorageDate);
    })    
    .FilterRow(f => f.Visible(true))
    .HeaderFilter(f => f.Visible(true))
    .GroupPanel(p => p.Visible(true))
    .Grouping(g => g.AutoExpandAll(true))
    .RemoteOperations(true)
    .Summary(s => s
        .TotalItems(totalItems => {
            totalItems.AddFor(m => m.Trash).SummaryType(SummaryType.Count);
        })
        .GroupItems(groupItems => {
            groupItems.Add().SummaryType(SummaryType.Count);
        })
    )
)

@section Scripts{
    <script src="~/js/dist/browser/signalr.min.js"></script>
    <script>       

        var connection = new signalR.HubConnectionBuilder()
            .withUrl("/hvihub")
            .build();

        $(function() {
            connection.start().then(function(){
                setInterval(() => {
                    connection.invoke("ExecuteProcedure")
                    .catch(function (err) {
                            return console.error(err.toString());
                    });
                }, 5000);

                connection.on("ReceiveStoredProcedureResult", function (result) {
                    var _store = [{
                        Id: null, WhseCode: null, WhseTag: null, C1: null, C2: null, Leaf: null, Stpl: null, Mic: null,
                        Str: null, LRR : null , CropYear: null, NetWeight: null, Comp: null, Len: null, Ext: null, RD: null,
                        PlusB: null, Uni : null , Trash: null, StorageDate: null 
                    }];

                    result.forEach(x => {
                        _store.push({
                            Id: x.id,
                            WhseCode: x.whseCode,
                            WhseTag: x.whseTag,
                            C1: x.c1,
                            C2: x.c2,
                            Leaf: x.leaf,
                            Stpl: x.stpl,
                            Mic: x.mic,
                            Str: x.str,
                            LRR: x.lrr,
                            CropYear: x.cropYear,
                            NetWeight: x.netWeight,
                            Comp: x.comp,
                            Len: x.len,
                            Ext: x.ext,
                            RD: x.rd,
                            PlusB: x.plusB,
                            Uni: x.uni,
                            Trash: x.trash,
                            StorageDate: x.storageDate
                        });
                    });               

                    $("#bodyTable").dxDataGrid({
                        dataSource: _store.shift()                        
                    });

                    
                    
                });
             });
        });      

    </script>
}


