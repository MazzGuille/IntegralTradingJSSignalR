@using IntegralTradingJS.Models;

@(
Html.DevExtreme().DataGrid<HVI>()
    .ID("bodyTable")
    .ShowBorders(true)
    .DataSource(d => d.Mvc().Controller("HVI").LoadAction("Get").Key("ID"))
    .Height(500)
    .FilterRow(f => f.Visible(true))
    .HeaderFilter(f => f.Visible(true))
    .GroupPanel(p => p.Visible(true))
    .Sorting(sorting => sorting.Mode(GridSortingMode.None))
    .Grouping(g => g.AutoExpandAll(false))
    .RemoteOperations(false)
    .LoadPanel(loadPanel => loadPanel.Enabled(true))  
    .Scrolling(scrolling => scrolling.ColumnRenderingMode(GridColumnRenderingMode.Standard))
    .Paging(paging => paging.Enabled(false)) 
    .Editing(e =>
    {
        e.UseIcons(true);
    })
    .Columns(columns => {
        columns.Add()
        .Width(75)
        .Type(GridCommandColumnType.Buttons)
        .Buttons(b =>
        {
            b.Add()
            .Hint("Crear oferta")
            .Icon("copy")
            .Visible(true)
            .OnClick("redirect");
        });
        columns.AddFor(m => m.ID).Width(75);
        columns.AddFor(m => m.Status).Width(75);
        columns.AddFor(m => m.Price).Width(75);
        columns.AddFor(m => m.WhseCode).Width(75);
        columns.AddFor(m => m.WhseTag).Width(75);
        columns.AddFor(m => m.C1).Width(75);
        columns.AddFor(m => m.C2).Width(75);
        columns.AddFor(m => m.Leaf).Width(75);
        columns.AddFor(m => m.Stpl).Width(75);
        columns.AddFor(m => m.Mic).Width(75);
        columns.AddFor(m => m.Str).Width(75);
        columns.AddFor(m => m.LRR).Width(75);
        columns.AddFor(m => m.CropYear).Width(75);
        columns.AddFor(m => m.NetWeight).Width(75);
        columns.AddFor(m => m.Comp).Width(75);
        columns.AddFor(m => m.Len).Width(75);
        columns.AddFor(m => m.Ext).Width(75);
        columns.AddFor(m => m.RD).Width(75);
        columns.AddFor(m => m.PlusB).Width(75);
        columns.AddFor(m => m.Uni).Width(75);
        columns.AddFor(m => m.Trash).Width(75);
        columns.AddFor(m => m.StorageDate).Width(75);
        //agregar columna con precio y status
    })    
  
   
)

@section Scripts{
    <script src="~/js/dist/browser/signalr.min.js"></script>
    <script>       

        var connection = new signalR.HubConnectionBuilder()
            .withUrl("/hvihub")
            .build();

        $(function() {
            connection.start().then(function(){
                setInterval(() => {
                    connection.invoke("ExecuteProcedure")
                    .catch(function (err) {
                            return console.error(err.toString());
                    });
                }, 60000);

                connection.on("ReceiveStoredProcedureResult", function (result) {
                    var _store = [{
                        Id: null, Status: null, Price: null, WhseCode: null, WhseTag: null, C1: null, C2: null, Leaf: null, Stpl: null, Mic: null,
                        Str: null, LRR : null , CropYear: null, NetWeight: null, Comp: null, Len: null, Ext: null, RD: null,
                        PlusB: null, Uni : null , Trash: null, StorageDate: null 
                    }];

                    result.forEach(x => {
                        _store.push({
                            Id: x.id,
                            Status: x.status,
                            Price: x.price,
                            WhseCode: x.whseCode,
                            WhseTag: x.whseTag,
                            C1: x.c1,
                            C2: x.c2,
                            Leaf: x.leaf,
                            Stpl: x.stpl,
                            Mic: x.mic,
                            Str: x.str,
                            LRR: x.lrr,
                            CropYear: x.cropYear,
                            NetWeight: x.netWeight,
                            Comp: x.comp,
                            Len: x.len,
                            Ext: x.ext,
                            RD: x.rd,
                            PlusB: x.plusB,
                            Uni: x.uni,
                            Trash: x.trash,
                            StorageDate: x.storageDate
                        });
                    });               

                    $("#bodyTable").dxDataGrid({
                        dataSource: _store.shift()                        
                    });

                    
                    
                });
             });
        });

        function redirect(){
            window.location.href = '/Buyer/Index'
        }

    </script>
}


