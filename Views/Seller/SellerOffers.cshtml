@inject IHttpContextAccessor cntx;
@{
    Layout = "~/Views/Shared/_HomeLayout.cshtml";
}
@using IntegralTradingJS.Models;
<div id="mainDiv" class="container d-flex flex-column align-items-center">
    <h1>Ofertas</h1>

    @(Html.DevExtreme().DataGrid<SellerOffers>()
        .ID("bodyTable")
        .ShowBorders(true)
        .DataSource(d => d.Mvc().Controller("SellerAPI").LoadAction("GetSellerOffers").Key("IdOffer"))
        .Height(460)
        .Width(1000)
        .FilterRow(f => f.Visible(true))
        .HeaderFilter(f => f.Visible(true))
        .ShowColumnLines(true)
        .ShowRowLines(true)
        .RowAlternationEnabled(true)
        .ShowBorders(true)
        .GroupPanel(p => p.Visible(true))
        .Sorting(sorting => sorting.Mode(GridSortingMode.None))
        .Grouping(g => g.AutoExpandAll(false))
        .RemoteOperations(true)
        .LoadPanel(loadPanel => loadPanel.Enabled(true))
        .Scrolling(scrolling => scrolling.ColumnRenderingMode(GridColumnRenderingMode.Standard))
        .Paging(paging => paging.Enabled(false))
        .AllowColumnResizing(true)
        .ColumnAutoWidth(true)
        .FocusedRowEnabled(true)
        .Editing(e => e.UseIcons(true))

        .Columns(columns =>
        {
                columns.AddFor(m => m.IdBid).Name("Offer2")
                                     .Width(35)
                                     .AllowFiltering(false)
                                     .AllowSorting(false)
                                     .CellTemplate(@<text>
                                         @(Html.DevExtreme()
                                            .Button()
                                            .Hint("Acciones")
                                            .Icon("money")
                                            .Type(ButtonType.Normal)                        
                                            .UseSubmitBehavior(false)
                                            .OnClick("function(options) {aceptarOferta(value); options.stopPropagation; }")
                                         )
                                     </text>);    
            columns.AddFor(m => m.IdOffer);
            columns.AddFor(m => m.IdBid);            
            columns.AddFor(m => m.Price);
            columns.AddFor(m => m.BidStatus);
            columns.AddFor(m => m.Comments);
            columns.AddFor(m => m.IdCompany).Visible(false);
            columns.AddFor(m => m.CompanyName);
            columns.AddFor(m => m.UserFullName);
            columns.AddFor(m => m.IdStatus).Visible(false);            

        })
        )

</div>

@section Scripts{
    <script>
        const nestUl = document.getElementById("nestUl")
        const buyerNav = document.getElementById("buyerNav")
        const homeNav = document.getElementById("homeNav")
        const sellerNav = document.getElementById("sellerNav")
        var IdStatus
        var bidArray = []
        var itemFound = []
        var tempArrayA = []
        var tempArrayR = []
        var offerNum

        function removeClass() {
            if (nestUl.classList.contains("visually-hidden")) {
                nestUl.classList.remove("visually-hidden")
            }
            else {
                nestUl.classList.add("visually-hidden")
            }
        }
        
        function navSeller() {
            sellerNav.classList.add('active')
            sellerNav.classList.add('underline')
            buyerNav.classList.remove('active')
            buyerNav.classList.remove('underline')
            homeNav.classList.remove('active')
            homeNav.classList.remove('underline')
            console.log("click seller")
        }

        document.addEventListener('DOMContentLoaded', listaDataGrid(), navSeller())

        function listaDataGrid() {
            $.get("/Buyer/GetSellerOffers", function (data) {
                data.forEach(x => {
                    bidArray.push({
                        IdOffer: x.IdOffer,
                        IdBid: x.IdBid,
                        Comments: x.Comments,
                        BidStatus: x.BidStatus
                    })
                });               
            });
        }

        function aceptarOferta(bidId){

            itemFound = bidArray.find((x) => {
                return x.IdBid == bidId
            })

            offerNum = itemFound.IdOffer

            statusOfBid = itemFound.BidStatus

            if (statusOfBid === "Pagada") {

                tempArrayR.push(bidId)
                tempArrayR.push(4)
                var arrayToSendreject = { values: tempArrayR }

                Swal.fire({
                    title: 'Oferta ' + offerNum,
                    text: 'Que desea hacer',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonText: 'Confirmar pago recibido',
                }).then((resultado) => {
                    if (resultado.isConfirmed) {
                        $.ajax({
                            type: "PUT",
                            url: "UpdateStatus",
                            data: arrayToSendreject,
                            datatype: "json",
                            success: function (data) {
                                location.reload()
                            },
                            error: function (data) {
                                Swal.fire({
                                    text: 'Ha ocurrido un error',
                                    icon: 'error',
                                    showCancelButton: false,
                                    confirmButtonText: 'Continuar'
                                })
                            }
                        });
                    }

                })
            }
            else if (statusOfBid === "PagoConfirmado")
            {
                Swal.fire({
                    title: 'Oferta ' + offerNum,
                    text: 'A espera de confirmacion del comprador',
                    icon: 'succes',
                    showCancelButton: false
                })
            }
            else if (statusOfBid === "Aprobada") {
                Swal.fire({
                    title: 'Oferta ' + offerNum,
                    text: 'A espera de confirmacion del comprador',
                    icon: 'succes',
                    showCancelButton: false
                })
            }
            else if (statusOfBid === "Recibida") {
                Swal.fire({
                    title: 'Oferta ' + offerNum,
                    text: 'Operacion finalizada',
                    icon: 'succes',
                    showCancelButton: false
                })
            }
            else if (statusOfBid === "Rechazada") {
                Swal.fire({
                    title: 'Oferta ' + offerNum,
                    text: 'Oferta rechazada. Operacion finalizada',
                    icon: 'succes',
                    showCancelButton: false
                })
            }
            else if (statusOfBid === "Nueva") {
                tempArrayA.push(bidId)
                tempArrayA.push(1)

                var arrayToSendApproved = { values: tempArrayA }
                Swal.fire({
                    title: 'Oferta ' + offerNum,
                    text: 'Que desea hacer',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonText: 'Confirmar oferta',
                    showDenyButton: true,
                    denyButtonText: 'Rechazar oferta'
                }).then((resultado) => {
                    if (resultado.isConfirmed) {

                        $.ajax({
                            type: "PUT",
                            url: "UpdateStatus",
                            data: arrayToSendApproved,
                            datatype: "json",
                            success: function (data) {
                                location.reload()
                            },
                            error: function (data) {
                                Swal.fire({
                                    text: 'Ha ocurrido un error',
                                    icon: 'error',
                                    showCancelButton: false,
                                    confirmButtonText: 'Continuar'
                                })
                            }
                        });

                    }
                    if (resultado.isDenied) {
                        tempArrayR.push(bidId)
                        tempArrayR.push(2)
                        var arrayToSendreject = { values: tempArrayR }

                        $.ajax({
                            type: "PUT",
                            url: "UpdateStatus",
                            data: arrayToSendreject,
                            datatype: "json",
                            success: function (data) {
                                location.reload()
                            },
                            error: function (data) {
                                Swal.fire({
                                    text: 'Ha ocurrido un error',
                                    icon: 'error',
                                    showCancelButton: false,
                                    confirmButtonText: 'Continuar'
                                })
                            }
                        });
                    }
                })

            }

                 
        }   

    </script>
}
