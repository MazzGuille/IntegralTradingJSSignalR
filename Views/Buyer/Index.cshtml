@inject IHttpContextAccessor cntx;
@{
    Layout = "~/Views/Shared/_HomeLayout.cshtml";
}
@using IntegralTradingJS.Models;
<div id="mainDiv" class="container d-flex flex-column align-items-center">
    <h1>Pujas</h1>
    <h5>Pujas realizadas por el usuario:</h5>

    @(
        Html.DevExtreme().DataGrid<BuyerBid>()
                  .ID("bodyTable")
                  .ShowBorders(true)
            .DataSource(d => d.Mvc().Controller("BuyerAPI").LoadAction("GetBuyerBid").Key("IdBid"))
                  .Height(450)
                  .Width(1100)
                  .FilterRow(f => f.Visible(true))
                  .HeaderFilter(f => f.Visible(true))
                  .ShowColumnLines(true)
                  .ShowRowLines(true)
                  .RowAlternationEnabled(true)
                  .ShowBorders(true)
                  .GroupPanel(p => p.Visible(true))
                  .Sorting(sorting => sorting.Mode(GridSortingMode.None))
                  .Grouping(g => g.AutoExpandAll(false))
                  .RemoteOperations(true)
                  .LoadPanel(loadPanel => loadPanel.Enabled(true))
                  .Scrolling(scrolling => scrolling.ColumnRenderingMode(GridColumnRenderingMode.Standard))
                  .Paging(paging => paging.Enabled(false))
                  .AllowColumnResizing(true)
                  .ColumnAutoWidth(true)
                  .FocusedRowEnabled(true)
                  .Editing(e => e.UseIcons(true))

        .Columns(columns =>
        {
            columns.AddFor(m => m.IdBid).Name("offerId")
                .Width(35)
                .AllowFiltering(false)
                .AllowSorting(false)
                .CellTemplate(@<text>
                    @(Html.DevExtreme()
                        .Button()
                        .Hint("Eliminar")
                        .Icon("delete")
                        .Type(ButtonType.Normal)
                        .UseSubmitBehavior(false)
                        .OnClick("function(options) {EliminateBid(value); options.stopPropagation; }")
        )
                </text>);
            columns.AddFor(m => m.IdBid);    
            columns.AddFor(m => m.Price);
            columns.AddFor(m => m.Comments);
            columns.AddFor(m => m.CompanyName);
            columns.AddFor(m => m.UserName);
            columns.AddFor(m => m.PriceSeller);
            columns.AddFor(m => m.UserSeller);
            columns.AddFor(m => m.UserCompany);

        })
    )

</div>
<!--  <button onclick="getUserBids()"  class="btn btn-primary fw-bold">Ofertas</button>
  <table id="tbBid" class="table table-striped">
        <thead class="bg-light">
            <tr>
                <th>Oferta</th>
                <th>Empresa</th>
                <th>Usuario</th>
                <th>Precio</th>
                <th>Status</th>
                <th>Comentarios</th>
                <th>Fecha</th>
            </tr>
        </thead>
        <tbody id="tableBody">
        </tbody>
    </table>-->


@section Scripts{
    <script src="~/lib/axios/dist/axios.min.js"></script>
    <script>
        const nestUl = document.getElementById("nestUl")

        function removeClass() {
            if (nestUl.classList.contains("visually-hidden")){
                nestUl.classList.remove("visually-hidden")
            }
            else{
                nestUl.classList.add("visually-hidden")
            }
        }

        function changeStatus(){
            fetch("/Buyer/UpdateStatus", {
                method:"PUT",               
                body: FormData
            });

            window.location.href = '/Home/HviAPI'
        }

        function EliminateBid(id){
            let idBid = id
            let url = "Buyer/EliminateBid"

            Swal.fire({
                title: '',
                text: '¿Deseas eliminar esta oferta?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Si'
            }).then((resultado) =>{
                if (resultado.isConfirmed){
                    axios.delete(url + "/" + idBid).then((res) => {
                        console.log(res.status);
                    })
                    window.location.reload()
                }
            })           
        }

        //function getUserBids(){
        //    $.get("/Buyer/GetUserBids", function(data){               
        //        console.log(data);
        //        document.getElementById("tableBody").innerHTML = "";
        //    data.forEach(x => {
        //        var tr = document.createElement("tr");
        //        var filaCelda = `<tr>
        //                         <td>${x.IdOffer}</td>
        //                         <td>${x.Id_company}</td>
        //                         <td>${x.IdUsuario}</td>
        //                         <td>${x.Price}</td>
        //                         <td>${x.IdBidStatusFK}</td>
        //                         <td>${x.Comments}</td>
        //                         <td>${x.Date}</td>
        //                        </tr>`;
        //        tr.innerHTML = filaCelda;
        //        document.getElementById("tableBody").append(tr);
        //    })
        //    })
        //}
    </script>
}